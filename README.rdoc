= Deep Cloning Gem

This gem gives every ActiveRecord::Base object the possibility to do a deep clone -- saving the cloned object(s) as it recurses.


Put this in your Gemfile to install:
    gem "deep_cloning", :git => "git://github.com/DerNalia/deep_cloning.git"



== Example

=== Arguments / Defaults
    ar_object.clone!(
        :include => [],
        :except => [:created_at, :updated_at, :id],
        :force => {},
        :remap => {} # not yet implemented
    )

=== Cloning a model without an attribute
   pirate.clone!(:except => :name)
 
=== Cloning a model without multiple attributes
   pirate.clone!(:except => [:name, :nick_name])
=== Cloning one single association
   pirate.clone!(:include => :mateys)

=== Cloning multiple associations
   pirate.clone!(:include => [:mateys, :treasures])

=== Cloning really deep
   pirate.clone!(:include => {:treasures => :gold_pieces})

=== Cloning really deep with multiple associations
   pirate.clone!(:include => [:mateys, {:treasures => :gold_pieces}])

=== The forcing of certain attributes
    pirate.clone!(:force => {
         :name => "Overridden by specifics below",
         :pirate => {:name => "SeÃ±or Jack"},
         :parrot => {:type => "eagle"}
        }
    )

=== Re-Mapping of attributes and objects
Handy for mutating objects that may have the same parent class.. or are just really similar

    pirate.clone!(:remap => {
         :pirate => [:red_coat, {:pirate_attr => :red_cout_attr}],
         :parrot => [:ostrich. {:parrot_attr => :ostrich_attr}]
        }
    )


=== Complicated example using all features

    @template_magazine = magazine.clone!(
      :include => [{:sections => :magazine_pages}, :magazine_attachments],
      :force => {:template_magazine => {:name => "Template of #{magazine.name}"}},
      :except => [:category_id],
      :remap => {
        :magazine => [:template_magazine, {
          :sections => :template_sections,
          :magazine_pages => :template_magazine_pages,
          :magazine_attachments => :template_magazine_attachments
        }],
        :section => [:template_section, {
          :magazine_id => :template_magazine_id,
          :magazine_pages => :template_magazine_pages
        }],
        :magazine_content => [:template_magazine_content, {
          :section_id => :template_section_id, 
          :magazine_id => :template_magazine_id
        }],
        :magazine_attachment => [:template_magazine_attachment, {
          :magazine_id => :template_magazine_id
        }]
      })

When remapping nested attributes, it's important to also remap the has_many relationship as well.  
So, for the above clone! example, the class models may look a little something like this:

==== The source object structure
    class Magazine < ActiveRecord::Base
        has_many :magazine_pages
        has_many :magazine_sections
        has_many :magazine_attachments
    end

    class MagazinePage < ActiveRecord::Base
        belongs_to :magazine_page
        belongs_to :section
    end

    class MagazineAttachment < ActiveRecord::Base
        belongs_to :magazine
    end

    class Section < ActiveRecord::Base
        belongs_to :magazine
        has_many :magazine_pages
    end
==== The object that is being converted to
    class TemplateMagazine < ActiveRecord::Base
        has_many :template_magazine_pages
        has_many :template_magazine_sections
        has_many :template_magazine_attachments
    end

    class TemplateMagazinePage < ActiveRecord::Base
        belongs_to :template_magazine_page
        belongs_to :template_section
    end

    class TemplateMagazineAttachment < ActiveRecord::Base
        belongs_to :template_magazine
    end

    class TemplateSection < ActiveRecord::Base
        belongs_to :template_magazine
        has_many :template_magazine_pages
    end

== To-Do

Change :except so that attributes for children models can be excluded -- similar to force syntax.

Originally Copyright (c) 2008 Jan De Poorter, released under the MIT license  

--> https://github.com/openminds/deep_cloning
